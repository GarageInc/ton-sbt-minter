#include "../imports/stdlib.fc";
#include "../params.fc";
#include "../opcodes.fc";
#include "./storage.fc";

;; NFT collection smart contract

const const::ok = 0xf09f918d;

() send_ok(
slice to_addr,
int value,
int mode
) impure {
    var msg = begin_cell()
    .store_uint(0x10, 6)
    .store_slice(to_addr)
    .store_grams(value)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(0, 32)
    .store_uint(const::ok, 32)
    .end_cell();

    send_raw_message(msg, mode);
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell()
    .store_uint(item_index, 128)
    .store_slice(my_address())
    .end_cell();

    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell()
    .store_uint(4, 3)
    .store_int(wc, 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(nft_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params, 32)
    .store_uint(query_id, 64)
    .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_base_data();

    if (op == op::get_royalty_params) {
        send_royalty_params(sender_address, query_id, ctx_royalty_params.begin_parse());
        return ();
    }

    if (op == "op::user_mint"c) {
        var signature = in_msg_body~load_bits(512);
        var cs = in_msg_body;
        var valid_until = cs~load_uint(32);

        var nft_index = cs~load_uint(128);
        var comission_amount = cs~load_coins();
        var nft_forward_amount = cs~load_coins();
        var nft_content = cs~load_ref();


        throw_unless(700, (nft_forward_amount + comission_amount) < msg_value);
        throw_if(35, valid_until <= now());
        throw_unless(35, check_signature(slice_hash(in_msg_body), signature, ctx_public_key));

        deploy_nft_item(
            nft_index,
            ctx_nft_code,
            nft_forward_amount,
            nft_content
        );
        return ();
    }

    throw_unless(401, equal_slices(sender_address, ctx_owner));


    if (op == "op::mint"c) {
        ;; deploy new nft
        int item_index = in_msg_body~load_uint(128);
        deploy_nft_item(
            item_index,
            ctx_nft_code,
            in_msg_body~load_coins(),
            in_msg_body~load_ref()
        );
        return ();
    }
    if (op == "op::mint_batch"c) {
        ;; batch deploy of new nfts
        int counter = 0;
        cell deploy_list = in_msg_body~load_ref();
        do {
            var (item_index, item, f?) = deploy_list~udict::delete_get_min(128);
            if (f?) {
                counter += 1;
                if (counter >= 250) {
                    ;; Limit due to limits of action list size
                    throw(399);
                }

                deploy_nft_item(
                    item_index,
                    ctx_nft_code,
                    item~load_coins(),
                    item~load_ref()
                );
            }
        } until (~ f?);

        store_base_data();
        return ();
    }
    if (op == "op::update_owner"c) {
        ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        ctx_owner = new_owner;
        store_base_data();
        return ();
    }
    if (op == "op::update_content"c) {
        ;; change content
        ctx_content = in_msg_body~load_ref();
        ctx_royalty_params = in_msg_body~load_ref();

        store_base_data();
        return ();
    }
    if (op == "op::collect_fees"c) {
        send_ok(sender_address, my_balance - 50000000, 0);
        return ();
    }
    if (op == "op::set_code"c) {
        var code = in_msg_body~load_ref();
        in_msg_body.end_parse();
        set_code(code);

        send_ok(sender_address, 0, 64);
        return ();
    }
    if (op == "op::set_data"c) {
        var data = in_msg_body~load_ref();
        in_msg_body.end_parse();
        set_data(data);

        send_ok(sender_address, 0, 64);
        return ();
    }
    if (op == "op::set_code_data"c) {
        var code = in_msg_body~load_ref();
        var data = in_msg_body~load_ref();
        in_msg_body.end_parse();

        set_code(code);
        set_data(data);

        send_ok(sender_address, 0, 64);
        return ();
    }

    throw(0xffff);
}

;; Get methods

var get_collection_data() method_id {
    load_base_data();

    slice cs = ctx_content.begin_parse();
    return (-1, cs~load_ref(), ctx_owner);
}

var get_nft_address_by_index(int index) method_id {
    load_base_data();

    cell state_init = calculate_nft_item_state_init(index, ctx_nft_code);
    return calculate_nft_item_address(0, state_init);
}

var royalty_params() method_id {
    load_base_data();

    slice rs = ctx_royalty_params.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

var get_nft_content(int index, cell individual_nft_content) method_id {
    load_base_data();

    slice cs = ctx_content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return begin_cell()
    .store_uint(1, 8) ;; offchain tag
    .store_slice(common_content)
    .store_ref(individual_nft_content)
    .end_cell();
}